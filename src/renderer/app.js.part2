function broadcastVote(taskId, voteType) {
  try {
    console.log(`Broadcasting vote on task ${taskId} to all peers: ${voteType}`);
    
    // Create vote message
    const voteMsg = {
      type: 'task-vote',
      taskId: taskId,
      vote: voteType,
      peerId: ownPeerId,
      username: usernameInput.value.trim() || 'You'
    };
    
    // Check if process variable is defined to avoid errors
    const processExists = typeof process !== 'undefined';
    
    // First try with data channels as they're more reliable
    let broadcastCount = 0;
    peers.forEach((peer, peerId) => {
      try {
        if (dataChannels.has(peerId) && dataChannels.get(peerId).readyState === 'open') {
          // Try sending via data channel first
          try {
            dataChannels.get(peerId).send(JSON.stringify(voteMsg));
            console.log(`Sharing vote with peer ${peerId} via data channel`);
            broadcastCount++;
          } catch (err) {
            if (processExists) {
              console.error(`Error sending vote to peer ${peerId} via data channel:`, err);
            } else {
              console.error(`Error sending vote to peer ${peerId} via data channel: ${err.message}`);
            }
            
            // Fallback to peer connection if data channel fails
            if (peer.connection && peer.connection.open) {
              peer.connection.send(JSON.stringify(voteMsg));
              console.log(`Sharing vote with peer ${peerId} via peer connection (fallback)`);
              broadcastCount++;
            }
          }
        } else if (peer.connection && peer.connection.open) {
          // Use peer connection if data channel not available
          peer.connection.send(JSON.stringify(voteMsg));
          console.log(`Sharing vote with peer ${peerId} via peer connection`);
          broadcastCount++;
        } else {
          console.warn(`Cannot send vote to peer ${peerId}: no open connection available`);
        }
      } catch (err) {
        if (processExists) {
          console.error(`Error broadcasting vote to peer ${peerId}:`, err);
        } else {
          console.error(`Error broadcasting vote to peer ${peerId}: ${err.message}`);
        }
      }
    });
    
    // Add a system message with the status
    if (broadcastCount > 0) {
      addSystemMessage(`Your vote was broadcast to ${broadcastCount} peers`);
    } else if (peers.size > 0) {
      addSystemMessage(`Warning: Failed to broadcast your vote to any peers`);
    }
    
    console.log(`Broadcast vote to ${broadcastCount} peers out of ${peers.size} total peers`);
    return broadcastCount;
    
  } catch (error) {
    console.error('Error broadcasting vote:', error);
    addSystemMessage(`Error sharing vote: ${error.message}`);
    return 0;
  }
}

// Handle data from peers
function handlePeerData(peerId, data) {
  try {
    // Try to parse as JSON
    const message = JSON.parse(data);
    console.log(`Received peer data from ${peerId}, type: ${message.type}`);
    
    switch (message.type) {
      case 'chat-message':
        if (message.username && message.text) {
          renderChatMessage(message.username, message.text, true);
        }
        break;
        
      case 'new-task':
        if (message.task) {
          // Validate the task object
          const requiredFields = ['id', 'text', 'createdAt', 'createdBy', 'status'];
          if (requiredFields.every(field => message.task[field] !== undefined)) {
            // Create/show the task
            handleNewTask(message.task, peerId);
            
            // Add a system message
            addSystemMessage(`${message.task.createdBy} created a new task. Vote to accept or reject.`);
          } else {
            console.error('Received invalid task object:', message.task);
          }
        }
        break;
        
      case 'task-vote':
        // Validate the vote data
        if (message.taskId !== undefined && message.vote && message.peerId === peerId) {
          console.log(`Received vote from ${peerId} (${message.username}): ${message.vote} for task ${message.taskId}`);
          
          // Add the vote to our task votes collection
          if (!taskVotes.has(message.taskId)) {
            taskVotes.set(message.taskId, new Map());
          }
          
          // Store the vote
          taskVotes.get(message.taskId).set(peerId, {
            peerId: peerId,
            username: message.username || peerUsernames.get(peerId) || 'Unknown user',
            vote: message.vote
          });
          
          // Update task UI and check for resolution
          updateTaskUI(message.taskId);
          checkTaskResolution(message.taskId);
          
          // Add a system message
          addSystemMessage(`${message.username || 'Peer'} voted to ${message.vote} the task.`);
        } else {
          console.error('Received invalid task vote:', message);
        }
        break;
        
      case 'transcript-message':
        if (message.username && message.text) {
          // Handle the transcript message
          updateTranscription(message.username, message.text);
        }
        break;
        
      // Handle other message types
      default:
        // Just log unknown message types
        console.log(`Received unknown message type: ${message.type}`, message);
    }
  } catch (e) {
    // Not JSON or error handling the message
    console.warn(`Error handling peer data from ${peerId}:`, e);
    console.log('Raw data received:', data);
  }
}

// Helper function to handle a new task (either created locally or received from peer)
function handleNewTask(task, peerId = null) {
  try {
    console.log(`Handling ${peerId ? 'received' : 'local'} task:`, task);
    
    // Check if we already have this task
    const existingTaskIndex = tasks.findIndex(t => t.id === task.id);
    
    if (existingTaskIndex === -1) {
      // Add to our local tasks array
      tasks.push(task);
      
      // Create a Map to store votes for this task if it doesn't exist
      if (!taskVotes.has(task.id)) {
        taskVotes.set(task.id, new Map());
      }
      
      // Set as the current pending task
      currentPendingTask = task;
      isPendingTask = true;
      
      // Create and show the task card
      createTaskCard(task);
      
      // Update the UI
      updateTaskUI(task.id);
    } else {
      console.log(`Task ${task.id} already exists locally`);
    }
  } catch (error) {
    console.error('Error handling task:', error);
  }
}

// Update the task UI based on current votes and status
function updateTaskUI(taskId) {
  try {
    // Find the task in our array
    const task = tasks.find(t => t.id === taskId);
    if (!task) {
      console.warn(`Task ${taskId} not found for UI update`);
      return;
    }
    
    // Get the task card
    const taskCard = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
    if (!taskCard) {
      console.warn(`Task card for task ${taskId} not found in DOM`);
      
      // If task is pending but we don't have the card displayed, create it
      if (task.status === 'pending') {
        console.log(`Creating missing task card for task ${taskId}`);
        createTaskCard(task);
        
        // Update the current pending task reference
        currentPendingTask = task;
        isPendingTask = true;
      }
      return;
    }
    
    // Get vote count elements
    const acceptCount = taskCard.querySelector('.accept-count');
    const rejectCount = taskCard.querySelector('.reject-count');
    
    // Update vote counts
    updateTaskVoteCounts(taskId, acceptCount, rejectCount);
    
    // Update task status UI if resolved
    if (task.status !== 'pending') {
      taskCard.classList.remove('pending');
      taskCard.classList.add(task.status);
      
      // Update UI elements
      const voteButtons = taskCard.querySelector('.task-actions');
      if (voteButtons) {
        if (task.status === 'accepted') {
          voteButtons.innerHTML = '<div class="status-badge accepted">Accepted ✓</div>';
        } else if (task.status === 'rejected') {
          voteButtons.innerHTML = '<div class="status-badge rejected">Rejected ✗</div>';
        }
      }
    }
  } catch (error) {
    console.error('Error updating task UI:', error);
  }
}

// Initialize audio recorder when ready
mediaRecorder.addEventListener('dataavailable', async (event) => {
  const audioBuffer = await event.data.arrayBuffer();
  recordedChunks.push(audioBuffer);
  
  // Process audio when recorded
  if (recordedChunks.length > 0) {
    const combinedBuffer = combineArrayBuffers(recordedChunks);
    
    // Reset before processing to avoid re-processing the same audio
    recordedChunks = [];
    
    // Process the audio for transcription
    processAudioAndTranscribe(new Uint8Array(combinedBuffer));
  }
});

// Update the settings UI

// Add model selector to settings popup
const settingsContent = document.getElementById('settings-content');
if (settingsContent) {
  // First make sure we don't add it twice
  if (!document.getElementById('transcription-model-container')) {
    // Create container for model selection
    const modelContainer = document.createElement('div');
    modelContainer.id = 'transcription-model-container';
    modelContainer.className = 'settings-group';
    
    // Create label
    const modelLabel = document.createElement('label');
    modelLabel.textContent = 'Transcription Model:';
    modelLabel.htmlFor = 'transcription-model-select';
    modelContainer.appendChild(modelLabel);
    
    // Create select element
    const modelSelect = document.createElement('select');
    modelSelect.id = 'transcription-model-select';
    modelSelect.className = 'settings-input';
    
    // Add options
    const models = [
      { value: 'whisper-1', text: 'Whisper-1 (Default)' },
      { value: 'gpt-4o-mini-transcribe', text: 'GPT-4o Mini (Better)' },
      { value: 'gpt-4o-transcribe', text: 'GPT-4o (Best)' }
    ];
    
    models.forEach(model => {
      const option = document.createElement('option');
      option.value = model.value;
      option.textContent = model.text;
      modelSelect.appendChild(option);
    });
    
    modelContainer.appendChild(modelSelect);
    
    // Add help text
    const helpText = document.createElement('div');
    helpText.className = 'settings-help';
    helpText.textContent = 'Select the model to use for transcribing audio. Better models provide more accurate transcriptions but may have higher usage costs.';
    modelContainer.appendChild(helpText);
    
    // Insert after API key input
    const apiKeyContainer = document.querySelector('.settings-group');
    if (apiKeyContainer && apiKeyContainer.parentNode) {
      apiKeyContainer.parentNode.insertBefore(modelContainer, apiKeyContainer.nextSibling);
    } else {
      settingsContent.appendChild(modelContainer);
    }
  }
}

// Load settings from main process
async function loadSettings() {
  try {
    const settings = await window.electronAPI.getSettings();
    console.log('Loaded settings:', settings);
    
    // Update API key input
    const apiKeyInput = document.getElementById('openai-api-key');
    if (apiKeyInput && settings.openaiApiKey) {
      apiKeyInput.value = settings.openaiApiKey;
    }
    
    // Update transcription model select
    const modelSelect = document.getElementById('transcription-model-select');
    if (modelSelect && settings.transcriptionModel) {
      modelSelect.value = settings.transcriptionModel;
    }
    
    return settings;
  } catch (error) {
    console.error('Error loading settings:', error);
    return {};
  }
}

// Save settings to main process
async function saveSettings() {
  try {
    // Get values from UI
    const apiKeyInput = document.getElementById('openai-api-key');
    const modelSelect = document.getElementById('transcription-model-select');
    
    const settings = {
      openaiApiKey: apiKeyInput ? apiKeyInput.value.trim() : '',
      transcriptionModel: modelSelect ? modelSelect.value : 'whisper-1'
    };
    
    console.log('Saving settings:', settings);
    
    // Send to main process
    const result = await window.electronAPI.saveSettings(settings);
    
    if (result.success) {
      // Show success message
      const saveStatus = document.getElementById('settings-save-status');
      if (saveStatus) {
        saveStatus.textContent = 'Settings saved successfully';
        saveStatus.className = 'settings-status success';
        
        // Clear status after 3 seconds
        setTimeout(() => {
          saveStatus.textContent = '';
          saveStatus.className = 'settings-status';
        }, 3000);
      }
    } else {
      throw new Error(result.error || 'Unknown error saving settings');
    }
    
    return result;
  } catch (error) {
    console.error('Error saving settings:', error);
    
    // Show error message
    const saveStatus = document.getElementById('settings-save-status');
    if (saveStatus) {
      saveStatus.textContent = `Error: ${error.message}`;
      saveStatus.className = 'settings-status error';
    }
    
    return { success: false, error: error.message };
  }
}

// Add event listener for settings save button
const saveSettingsButton = document.getElementById('save-settings');
if (saveSettingsButton) {
  saveSettingsButton.addEventListener('click', async () => {
    // Show saving indicator
    const saveStatus = document.getElementById('settings-save-status');
    if (saveStatus) {
      saveStatus.textContent = 'Saving...';
      saveStatus.className = 'settings-status info';
    }
    
    // Save settings
    await saveSettings();
  });
}

// Load settings when app starts
window.addEventListener('DOMContentLoaded', async () => {
  // Load saved settings
  await loadSettings();
});

// Set up OpenAI API key save button
saveApiKeyBtn.addEventListener('click', async () => {
  try {
    const apiKey = openaiApiKeyInput.value.trim();
    
    // Validate the API key (very basic validation)
    if (!apiKey) {
      apiKeyStatus.textContent = 'API key cannot be empty';
      apiKeyStatus.className = 'error';
      return;
    }
    
    if (!apiKey.startsWith('sk-') || apiKey.length < 20) {
      apiKeyStatus.textContent = 'Invalid API key format';
      apiKeyStatus.className = 'error';
      return;
    }
    
    // Show saving state
    apiKeyStatus.textContent = 'Saving API key...';
    apiKeyStatus.className = 'info';
    
    // Get current settings to update the API key
    const currentSettings = await window.electronAPI.getSettings();
    currentSettings.openaiApiKey = apiKey;
    
    // Save the updated settings
    const result = await window.electronAPI.saveSettings(currentSettings);
    
    if (result.success) {
      apiKeyStatus.textContent = 'API key saved successfully';
      apiKeyStatus.className = 'success';
      
      // Clear status after 3 seconds
      setTimeout(() => {
        apiKeyStatus.textContent = '';
        apiKeyStatus.className = '';
      }, 3000);
    } else {
      apiKeyStatus.textContent = `Error: ${result.error || 'Unknown error'}`;
      apiKeyStatus.className = 'error';
    }
  } catch (error) {
    console.error('Error saving API key:', error);
    apiKeyStatus.textContent = `Error: ${error.message || 'Unknown error'}`;
    apiKeyStatus.className = 'error';
  }
});
